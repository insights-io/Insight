(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{1143:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return CountByDeviceClass_CountByDeviceClass}));__webpack_require__(36),__webpack_require__(43),__webpack_require__(44),__webpack_require__(98),__webpack_require__(48),__webpack_require__(47),__webpack_require__(37),__webpack_require__(279),__webpack_require__(52),__webpack_require__(45),__webpack_require__(50),__webpack_require__(99),__webpack_require__(30),__webpack_require__(46),__webpack_require__(39),__webpack_require__(42);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),charting=__webpack_require__(346);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var CountByDeviceClass=function(_ref){var data=_ref.data,id="count-by-device-class-chart",chartData=Object(react.useMemo)((function(){return Object.keys(data).reduce((function(acc,deviceClass){return[].concat(_toConsumableArray(acc),[{deviceClass:deviceClass,count:data[deviceClass]}])}),[])}),[data]);return Object(react.useLayoutEffect)((function(){var chart=Object(charting.c)(id,charting.a);chart.data=chartData;var pieSeries=chart.series.push(new charting.b);return pieSeries.dataFields.value="count",pieSeries.dataFields.category="deviceClass",function(){chart.dispose()}}),[chartData]),react_default.a.createElement("div",{id:id,style:{width:"100%",height:"100%"}})};CountByDeviceClass.displayName="CountByDeviceClass",CountByDeviceClass.__docgenInfo={description:"",methods:[],displayName:"CountByDeviceClass",props:{data:{required:!0,tsType:{name:"Record",elements:[{name:"string"},{name:"number"}],raw:"Record<string, number>"},description:""}}};var CountByDeviceClass_CountByDeviceClass=CountByDeviceClass;"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/modules/insights/components/charts/CountByDeviceClass/CountByDeviceClass.tsx"]={name:"CountByDeviceClass",docgenInfo:CountByDeviceClass.__docgenInfo,path:"src/modules/insights/components/charts/CountByDeviceClass/CountByDeviceClass.tsx"})}}]);
//# sourceMappingURL=8.da32b9cd826a002b3012.bundle.js.map