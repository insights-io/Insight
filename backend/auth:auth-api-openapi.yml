---
openapi: 3.0.1
info:
  title: Auth API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /v1/config:
    get:
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppConfigBase'
  /v1/organizations:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/invites:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamInviteCreateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/invites/{token}:
    delete:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/invites/{token}/accept:
    post:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamInviteAcceptDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/invites/{token}/send:
    post:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/members:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/organizations/{organizationId}:
    get:
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/password_change:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/password_forgot:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordForgotRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/password_reset/{token}:
    post:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/password_reset/{token}/exists:
    get:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/signup:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequestDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/signup/{token}/complete:
    get:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/signup/{token}/valid:
    get:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/auth/token:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    post:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/auth/token/{token}:
    delete:
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/login:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  pattern: \S
                  type: string
                  nullable: false
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/logout:
    post:
      parameters:
        - name: SessionId
          in: cookie
          schema:
            pattern: \S
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/logout-from-all-devices:
    post:
      parameters:
        - name: SessionId
          in: cookie
          schema:
            pattern: \S
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/me:
    get:
      parameters:
        - name: SessionId
          in: cookie
          required: true
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/oauth2/github/callback:
    get:
      parameters:
        - name: code
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: cookie
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/oauth2/github/signin:
    get:
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: redirect
          in: query
          schema:
            $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: OK
  /v1/sso/oauth2/google/callback:
    get:
      parameters:
        - name: code
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: cookie
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/oauth2/google/signin:
    get:
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: redirect
          in: query
          schema:
            $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: OK
  /v1/sso/oauth2/microsoft/callback:
    get:
      parameters:
        - name: code
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: state
          in: cookie
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/oauth2/microsoft/signin:
    get:
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: redirect
          in: query
          schema:
            $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: OK
  /v1/sso/saml/callback:
    post:
      parameters:
        - name: state
          in: cookie
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/saml/signin:
    get:
      parameters:
        - name: email
          in: query
          schema:
            pattern: \S
            type: string
            nullable: false
        - name: redirect
          in: query
          schema:
            $ref: '#/components/schemas/URL'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/session:
    get:
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/sessions:
    get:
      parameters:
        - name: SessionId
          in: cookie
          required: true
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/setup:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    post:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/setup/{domain}:
    get:
      parameters:
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa:
    get:
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/challenge:
    get:
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/challenge/sms/send_code:
    post:
      parameters:
        - name: ChallengeId
          in: cookie
          schema:
            pattern: \S
            type: string
            nullable: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/challenge/{method}/complete:
    post:
      parameters:
        - name: method
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TfaMethod'
        - name: ChallengeId
          in: cookie
          schema:
            pattern: \S
            type: string
            nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TfaChallengeCompleteDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/sms/send_code:
    post:
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/{method}:
    get:
      parameters:
        - name: method
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TfaMethod'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      parameters:
        - name: method
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TfaMethod'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/sso/tfa/{method}/setup:
    get:
      parameters:
        - name: method
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TfaMethod'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
    post:
      parameters:
        - name: method
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TfaMethod'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TfaChallengeCompleteDTO'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
  /v1/user:
    get:
      parameters:
        - name: SessionId
          in: cookie
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 401,
                    "reason": "Unauthorized",
                    "message": "Unauthorized"
                  }
                }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 500,
                    "reason": "Internal Server Error",
                    "message": "Internal Server Error"
                  }
                }
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapStringObject'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 404,
                    "reason": "Bad Request",
                    "message": "Bad Request",
                    "errors": {
                      "body": "Required"
                    }
                  }
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 401,
                    "reason": "Unauthorized",
                    "message": "Unauthorized"
                  }
                }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 500,
                    "reason": "Internal Server Error",
                    "message": "Internal Server Error"
                  }
                }
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
  /v1/user/phone_number/verify:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TfaChallengeCompleteDTO'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 404,
                    "reason": "Bad Request",
                    "message": "Bad Request",
                    "errors": {
                      "body": "Required"
                    }
                  }
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 401,
                    "reason": "Unauthorized",
                    "message": "Unauthorized"
                  }
                }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 500,
                    "reason": "Internal Server Error",
                    "message": "Internal Server Error"
                  }
                }
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
  /v1/user/phone_number/verify/send_code:
    post:
      responses:
        '400':
          description: Phone number already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 404,
                    "reason": "Bad Request",
                    "message": "Bad Request",
                    "errors": {
                      "body": "Required"
                    }
                  }
                }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 401,
                    "reason": "Unauthorized",
                    "message": "Unauthorized"
                  }
                }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 500,
                    "reason": "Internal Server Error",
                    "message": "Internal Server Error"
                  }
                }
        '200':
          description: Verification validity info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TfaSetupStartResponse'
  /v1/user/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 401,
                    "reason": "Unauthorized",
                    "message": "Unauthorized"
                  }
                }
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 404,
                    "reason": "Not Found",
                    "message": "Not Found"
                  }
                }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDataResponse'
              example: |-
                {
                  "error": {
                    "statusCode": 500,
                    "reason": "Internal Server Error",
                    "message": "Internal Server Error"
                  }
                }
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
components:
  schemas:
    SetString:
      uniqueItems: true
      type: array
      items:
        type: string
    NewCookie:
      type: object
      properties:
        domain:
          type: string
        name:
          type: string
        path:
          type: string
        value:
          type: string
        version:
          format: int32
          type: integer
        comment:
          type: string
        expiry:
          $ref: '#/components/schemas/Date'
        httpOnly:
          type: boolean
        maxAge:
          format: int32
          type: integer
        secure:
          type: boolean
    MapStringNewCookie:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NewCookie'
    Date:
      format: date
      type: string
    EntityTag:
      type: object
      properties:
        value:
          type: string
        weak:
          type: boolean
    MultivaluedMapStringObject:
      type: object
      additionalProperties: {}
    Locale:
      type: object
      properties:
        country:
          type: string
        displayCountry:
          type: string
        displayLanguage:
          type: string
        displayName:
          type: string
        displayScript:
          type: string
        displayVariant:
          type: string
        extensionKeys:
          $ref: '#/components/schemas/SetCharacter'
        iSO3Country:
          type: string
        iSO3Language:
          type: string
        language:
          type: string
        script:
          type: string
        unicodeLocaleAttributes:
          $ref: '#/components/schemas/SetString'
        unicodeLocaleKeys:
          $ref: '#/components/schemas/SetString'
        variant:
          type: string
    Link:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/MapStringString'
        rel:
          type: string
        rels:
          $ref: '#/components/schemas/ListString'
        title:
          type: string
        type:
          type: string
        uri:
          $ref: '#/components/schemas/URI'
        uriBuilder:
          $ref: '#/components/schemas/UriBuilder'
    SetLink:
      uniqueItems: true
      type: array
      items:
        $ref: '#/components/schemas/Link'
    URI:
      format: uri
      type: string
    MediaType:
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/MapStringString'
        subtype:
          type: string
        type:
          type: string
        wildcardSubtype:
          type: boolean
        wildcardType:
          type: boolean
    StatusType:
      type: object
      properties:
        family:
          $ref: '#/components/schemas/Family'
        reasonPhrase:
          type: string
        statusCode:
          format: int32
          type: integer
    MultivaluedMapStringString:
      type: object
      additionalProperties:
        type: string
    Family:
      enum:
        - CLIENT_ERROR
        - INFORMATIONAL
        - OTHER
        - REDIRECTION
        - SERVER_ERROR
        - SUCCESSFUL
      type: string
    MapStringString:
      type: object
      additionalProperties:
        type: string
    ListString:
      type: array
      items:
        type: string
    UriBuilder:
      type: object
    SetCharacter:
      uniqueItems: true
      type: array
      items:
        format: byte
        type: string
    Response:
      type: object
      properties:
        allowedMethods:
          $ref: '#/components/schemas/SetString'
        cookies:
          $ref: '#/components/schemas/MapStringNewCookie'
        date:
          $ref: '#/components/schemas/Date'
        entity:
          type: object
        entityTag:
          $ref: '#/components/schemas/EntityTag'
        headers:
          $ref: '#/components/schemas/MultivaluedMapStringObject'
        language:
          $ref: '#/components/schemas/Locale'
        lastModified:
          $ref: '#/components/schemas/Date'
        length:
          format: int32
          type: integer
        links:
          $ref: '#/components/schemas/SetLink'
        location:
          $ref: '#/components/schemas/URI'
        mediaType:
          $ref: '#/components/schemas/MediaType'
        metadata:
          $ref: '#/components/schemas/MultivaluedMapStringObject'
        status:
          format: int32
          type: integer
        statusInfo:
          $ref: '#/components/schemas/StatusType'
        stringHeaders:
          $ref: '#/components/schemas/MultivaluedMapStringString'
    UUID:
      format: uuid
      pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      type: string
    TeamInviteAcceptDTO:
      type: object
      properties:
        fullName:
          pattern: \S
          type: string
          nullable: false
        password:
          type: string
    UserRole:
      enum:
        - ADMIN
        - STANDARD
      type: string
    TeamInviteCreateDTO:
      required:
        - role
      type: object
      properties:
        email:
          pattern: \S
          type: string
          nullable: false
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
            - enum:
                - ADMIN
                - STANDARD
              nullable: false
    PasswordForgotRequestDTO:
      type: object
      properties:
        email:
          pattern: \S
          type: string
          nullable: false
    PasswordChangeRequestDTO:
      type: object
      properties:
        confirmNewPassword:
          type: string
        currentPassword:
          type: string
        newPassword:
          type: string
    PasswordResetRequestDTO:
      type: object
      properties:
        password:
          type: string
    PhoneNumberDTO:
      type: object
      properties:
        countryCode:
          pattern: \S
          type: string
          nullable: false
        digits:
          pattern: \S
          type: string
          nullable: false
    SignUpRequestDTO:
      type: object
      properties:
        company:
          pattern: \S
          type: string
          nullable: false
        email:
          pattern: \S
          type: string
          nullable: false
        fullName:
          pattern: \S
          type: string
          nullable: false
        password:
          type: string
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumberDTO'
    UserDTO:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/OffsetDateTime'
        email:
          type: string
        fullName:
          type: string
        id:
          $ref: '#/components/schemas/UUID'
        organizationId:
          type: string
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumberDTO'
        phoneNumberVerified:
          type: boolean
        role:
          $ref: '#/components/schemas/UserRole'
        updatedAt:
          $ref: '#/components/schemas/OffsetDateTime'
    OffsetDateTime:
      format: date-time
      type: string
    UserDataResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserDTO'
    Boom:
      type: object
      properties:
        errors:
          type: object
        message:
          type: string
        reason:
          type: string
        statusCode:
          format: int32
          type: integer
    ErrorDataResponse:
      type: object
      properties:
        boom:
          $ref: '#/components/schemas/Boom'
    TfaSmsSetupStartDTO:
      type: object
      properties:
        validitySeconds:
          format: int32
          type: integer
    TfaSetupStartResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TfaSmsSetupStartDTO'
    MapStringObject:
      type: object
      additionalProperties: {}
    TfaChallengeCompleteDTO:
      required:
        - code
      type: object
      properties:
        code:
          format: int32
          type: integer
          nullable: false
    URL:
      type: object
      properties:
        authority:
          type: string
        file:
          type: string
        hashCode:
          format: int32
          type: integer
        host:
          type: string
        port:
          format: int32
          type: integer
        protocol:
          type: string
        ref:
          type: string
        content:
          type: object
        defaultPort:
          format: int32
          type: integer
        serializedHashCode:
          format: int32
          type: integer
    TfaMethod:
      enum:
        - SMS
        - TOTP
      type: string
    AppConfigBase:
      type: object
      properties:
        gitCommitSha:
          type: string
