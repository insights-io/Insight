version: '3.7'

services:
  try:
    build:
      context: ../..
      dockerfile: frontend/try/docker/Dockerfile
    ports:
      - '3002:3000'
    depends_on:
      - auth-api
    volumes:
      - ../../frontend/app/.env.development:/usr/app/.env.production

  app:
    build:
      context: ../..
      dockerfile: frontend/app/docker/Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - auth-api
      - session-api
      - billing-api
    volumes:
      - ../../frontend/app/.env.development.docker:/usr/app/.env.production

  auth-api:
    build:
      context: ..
      dockerfile: auth/auth-api/docker/Dockerfile.jvm
    ports:
      - '8080:80'
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
      - MAILER_USERNAME=${MAILER_USERNAME}
      - MAILER_PASSWORD=${MAILER_PASSWORD}
      - MAILER_MOCK=${MAILER_MOCK}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - auth-api-postgres-migrations

  auth-api-postgres-migrations:
    build:
      context: ../auth/auth-api/migrations/postgres
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  billing-api:
    build:
      context: ..
      dockerfile: billing/billing-api/docker/Dockerfile.jvm
    ports:
      - '8083:80'
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-dev_secret}
    depends_on:
      - auth-api
      - billing-api-postgres-migrations

  billing-api-postgres-migrations:
    build:
      context: ../billing/billing-api/migrations/postgres
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  beacon-api:
    build:
      context: ..
      dockerfile: beacon/beacon-api/docker/Dockerfile.jvm
    ports:
      - '8081:80'
    depends_on:
      - session-api
      - kafka
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
      - SESSION_SERVICE_BASE_URL=http://session-api

  session-api:
    build:
      context: ..
      dockerfile: session/session-api/docker/Dockerfile.jvm
    ports:
      - '8082:80'
    depends_on:
      - kafka
      - auth-api
      - session-api-postgres-migrations
      - session-api-elasticsearch-migrations
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
      - ELASTICSEARCH_HOSTS=elasticsearch:9200

  session-api-elasticsearch-migrations:
    build:
      context: ../session/session-api/migrations/elasticsearch
      dockerfile: Dockerfile
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: on-failure

  session-api-postgres-migrations:
    build:
      context: ../session/session-api/migrations/postgres
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  search-indexer:
    build:
      context: ..
      dockerfile: events/search-indexer/docker/Dockerfile.jvm
    depends_on:
      - kafka
      - elasticsearch
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - ELASTICSEARCH_HOSTS=elasticsearch:9200

  # Postgres
  db:
    image: postgres:12.4
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  # Kafka
  kafka:
    image: strimzi/kafka:0.19.0-kafka-2.5.0
    command:
      [
        'sh',
        '-c',
        'bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}',
      ]
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      LOG_DIR: '/tmp/logs'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  zookeeper:
    image: strimzi/kafka:0.19.0-kafka-2.5.0
    command:
      ['sh', '-c', 'bin/zookeeper-server-start.sh config/zookeeper.properties']
    ports:
      - '2181:2181'
    environment:
      LOG_DIR: /tmp/logs

  # Elk
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      discovery.type: single-node
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch

  # Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.21.0
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - 16686:16686
      - 14268:14268

  # Browser
  browser-bootstrap:
    build:
      context: ../../
      dockerfile: frontend/browser/bootstrap/docker/Dockerfile
    ports:
      - '5001:80'

  browser-tracking:
    build:
      context: ../../
      dockerfile: frontend/browser/tracking/docker/Dockerfile
    ports:
      - '5000:80'

  stripe-print-secret:
    image: stripe/stripe-cli
    command: listen --print-secret --api-key ${STRIPE_SECRET_KEY}

  stripe-listen:
    image: stripe/stripe-cli
    command: listen --api-key ${STRIPE_SECRET_KEY} --forward-to localhost:8083/v1/billing/subscriptions/event --skip-verify
    network_mode: host
