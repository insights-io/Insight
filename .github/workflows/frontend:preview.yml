---
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    paths:
      - '.github/workflows/frontend:preview.yml'
      - 'frontend/app/**'
      - 'frontend/try/**'
      - 'frontend/shared/**'
      - 'jest.config.js'
      - 'lerna.json'
      - 'package.json'
      - 'tsconfig.json'
      - 'yarn.lock'

env:
  CI: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  AWS_DEV_HOSTED_ZONE_ID: ${{ secrets.AWS_DEV_HOSTED_ZONE_ID }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEV_DOMAIN_NAME: ${{ secrets.DEV_DOMAIN_NAME }}
  PR_NAME: pr-${{ github.event.number }}
  PREVIEWS_BUCKET_NAME: ${{ secrets.AWS_S3_FRONTEND_PREVIEWS_BUCKET_NAME }}

jobs:
  deploy_preview:
    name: Deploy preview ðŸš€
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    strategy:
      matrix:
        target:
          [
            { name: 'app', cert_arn_lookup: 'AWS_APP_PREVIEW_CERTIFICATE_ARN' },
            { name: 'try', cert_arn_lookup: 'AWS_TRY_PREVIEW_CERTIFICATE_ARN' },
          ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install NPM dependencies & build dependencies
        run: |
          yarn install --frozen-lockfile
          yarn workspace @rebrowse/${{ matrix.target.name }} prebuild
          sed -i '180ires.removeHeader(\"connection\")\;' node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js
      # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html#lambda-blacklisted-headers
      # http-proxy lib is not configurable enough to allow nice removal of 'connection' header. We should extract what we need at some point.
      - name: Serverless Deploy
        working-directory: frontend/${{ matrix.target.name }}
        run: |
          aws s3 sync s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME/.serverless .serverless --delete
          envsubst < ../shared/previews/serverless.yml > serverless.yml
          echo "PROXY=staging" >> .env.production
          sed -i 's,http://localhost:3002,https://pr-${{ github.event.number }}.try.${{ secrets.DEV_DOMAIN_NAME }},g' .env.production
          sed -i 's,http://localhost:3000,https://pr-${{ github.event.number }}.app.${{ secrets.DEV_DOMAIN_NAME }},g' .env.production
          npx serverless
          DISTRIBUTION_URL=$(cat .serverless/Template.$NAME.CloudFront.json | jq -r '.url')
          DISTRIBUTION_DOMAIN=$(echo "$DISTRIBUTION_URL" | awk -F/ '{print $3}')
          echo "DISTRIBUTION_DOMAIN=$DISTRIBUTION_DOMAIN" >> $GITHUB_ENV
          echo "DISTRIBUTION_URL=$DISTRIBUTION_URL" >> $GITHUB_ENV
          aws s3 sync .serverless s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME/.serverless --delete
          aws s3 cp serverless.yml s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME/serverless.yml
        env:
          NAME: ${{ matrix.target.name }}
          CERTIFICATE_ARN: ${{ secrets[matrix.target.cert_arn_lookup] }}
          PR_DEPLOYMENT_DOMAIN: pr-${{ github.event.number }}.${{ matrix.target.name }}.${{ secrets.DEV_DOMAIN_NAME }}
      - name: Create AWS route53 DNS records
        run: |
          envsubst < frontend/shared/previews/route53-change-set.json > route53-change-set.json
          aws route53 change-resource-record-sets --region $AWS_REGION --hosted-zone-id $AWS_DEV_HOSTED_ZONE_ID --change-batch 'file://route53-change-set.json'
        env:
          ACTION: UPSERT
          NAME: pr-${{ github.event.number }}.${{ matrix.target.name }}.${{ secrets.DEV_DOMAIN_NAME }}
          DNSName: ${{ env.DISTRIBUTION_DOMAIN }}

  comment_previews:
    name: Comment preview ðŸ’¬
    runs-on: ubuntu-latest
    needs: [deploy_preview]

    steps:
      - name: Comment PR ðŸ’¬
        uses: unsplash/comment-on-pr@master
        with:
          check_for_duplicate_msg: true
          msg: |
            Available previews:
            - app: https://pr-${{ github.event.number }}.app.${{ secrets.DEV_DOMAIN_NAME }} ðŸš€
            - try: https://pr-${{ github.event.number }}.try.${{ secrets.DEV_DOMAIN_NAME }} ðŸš€

  cleanup_preview:
    name: Cleanup preview ðŸ’£
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    strategy:
      fail-fast: false
      matrix:
        target: ['app', 'try']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install NPM dependencies
        run: |
          yarn install --frozen-lockfile
          yarn workspace @rebrowse/${{ matrix.target }} prebuild
          sed -i '180ires.removeHeader(\"connection\")\;' node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js
      - name: Serverless remove
        working-directory: frontend/${{ matrix.target }}
        run: |
          aws s3 sync s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME/.serverless .serverless --delete
          aws s3 cp s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME/serverless.yml serverless.yml
          npx serverless
          API_EDGE_LAMBDA_NAME=$(cat .serverless/Template.$NAME.apiEdgeLambda.json | jq -r '.name')
          echo "API_EDGE_LAMBDA_NAME=$API_EDGE_LAMBDA_NAME" >> $GITHUB_ENV
          DEFAULT_EDGE_LAMBDA_NAME=$(cat .serverless/Template.$NAME.defaultEdgeLambda.json | jq -r '.name')
          echo "DEFAULT_EDGE_LAMBDA_NAME=$DEFAULT_EDGE_LAMBDA_NAME" >> $GITHUB_ENV
          DISTRIBUTION_ID=$(cat .serverless/Template.$NAME.CloudFront.json | jq -r '.id')
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
          DISTRIBUTION_URL=$(cat .serverless/Template.$NAME.CloudFront.json | jq -r '.url')
          DISTRIBUTION_DOMAIN=$(echo "$DISTRIBUTION_URL" | awk -F/ '{print $3}')
          echo "DISTRIBUTION_DOMAIN=$DISTRIBUTION_DOMAIN" >> $GITHUB_ENV
          npx serverless remove
          aws s3 rm s3://$PREVIEWS_BUCKET_NAME/$PR_NAME/$NAME --recursive
        env:
          NAME: ${{ matrix.target }}
      - name: Delete AWS route53 DNS records
        run: |
          envsubst < frontend/shared/previews/route53-change-set.json > route53-change-set.json
          aws route53 change-resource-record-sets --region $AWS_REGION --hosted-zone-id $AWS_DEV_HOSTED_ZONE_ID --change-batch 'file://route53-change-set.json'
        env:
          ACTION: DELETE
          NAME: pr-${{ github.event.number }}.${{ matrix.target }}.${{ secrets.DEV_DOMAIN_NAME }}
          DNSName: ${{ env.DISTRIBUTION_DOMAIN }}
      - name: Delete AWS Cloudfront distribution
        run: |
          ./scripts/aws/delete_cloudfront_distribution.sh "$DISTRIBUTION_ID"
      - name: Delete AWS Lambda @ Edge functions
        run: |
          ./scripts/aws/delete_lambda@edge.sh "$DEFAULT_EDGE_LAMBDA_NAME"
          ./scripts/aws/delete_lambda@edge.sh "$API_EDGE_LAMBDA_NAME"
